NAME
	room.h - helpfile for /std/room.c

DESCRIPTION
	This file is meant to make it easier to use the functions and features
	provided by /std/room.c. It contains macros that provide simple and
	common functions needed in many rooms. To use it you must both inherit
	/std/room.c and include /std/room.h. A list of available macros
	follows.

=============================================================================
NAME
	LINEBREAK ( DESC )

USE WITH
	set_long, add_item	

DESCRIPTION
	This can be used as an argument to set_long or set_item. The effect
	will be that the string X will be linebreak:ed to the individual
	line length setting of the player looking at this room / item.

EXAMPLE
	set_long(LINEBREAK("This is a really long text that will be wrapped "+
	                   "to the number of characters you have chosen with "+
	                   "stty cols."));

=============================================================================
NAME
	CMD_MOVETO( TEXT, DESTINATION )

USE WITH
	add_command, add_item_cmd

DESCRIPTION
	This macro makes it simple to implement teleport commands, hidden
	exits and similar things. The first argument is the text that will
	normally be written after 'leaves' when someone does this command.
	and the second is the destination room.

EXAMPLE
	add_command("jump",CMD_MOVETO("abruptly","bottom_of_gorge"));

=============================================================================
NAME
	CMD_TELEPORT ( DESTINATION )

USE WITH
	add_command, add_item_cmd

DESCRIPTION
	This macro works just like CMD_MOVETO but makes the player executing
	the command teleport instead. The standard 'teleport' message will
	be displayed for the player.

EXAMPLE
	add_action("beam me up scotty",CMD_TELEPORT("enterprise"));

=============================================================================
NAME
	CMD_MSG ( MSG )

USE WITH
	add_command, add_item_cmd

DECRIPTION
	When the player executes the command, X will be sent to
	/std/msg->msg() and 1 will then be returned.

EXAMPLE
	add_item_cmd("touch","door",
	              CMD_MSG("\b1PRON \b{touch,touches} the door, nothing happens.\n"));

=============================================================================
NAME
	ITEM_FIND ( WHAT, DESCRIPTION )

USE WITH
	add_item

DESCRIPTION
	This makes it simple to make it so that a player finds something when
	he looks at something. The first argument is the filename of the object
	to clone when he/she/it looks at the item. The second is the
	description that will be written if there is nothing to be found.
	(Only one can be found / reset.)

EXAMPLE
	add_item("trashcan",ITEM_FIND("~/obj/knife",
	                              "It's full of trash.\n"))

=============================================================================
NAME
	BLOCK_IF_PRESENT ( WHAT )

USE WITH
	add_exit

DESCRIPTION
	This macro can be given as 4th argument to add_exit. Then you cannot
	go that direction while there is a WHAT present in the room.

EXAMPLE
	add_exit("south","/room/church",0,BLOCK_IF_PRESENT("guard"));

=============================================================================
NAME
	BLOCK_WITH_MSG ( MSG )

USE WITH
	add_exit

DESCRIPTION
	Used as 4th as fourth argument to add_exit, this macro will block this
	exit permanently. If someone tries to go that way MSG will be sent to
	/std/msg->msg().

EXAMPLE
	add_exit("up","tower/stairs1",0,BLOCK_WITH_MSG("\bPRON "+
	         "\b{try,tries} to go up the stairs, but fail miserably.\n"));

=============================================================================
NAME
	RANDOM_EXIT ( EXITS )

USE WITH
	add_exit

DESCRIPTION
	This allows you to make exits that leads to one of a few randomly
	selected places. EXITS should be a string with a space between each
	destination room. Note that file expansion is not done on these files,
	full pathnames must be used.

EXAMPLE
	add_exit("enter",RANDOM_EXIT("/room/church /players/profezzorn/pub"));

=============================================================================
NAME
	ADD_HIDDEN_EXIT( DIR, DESTINATION )

DESCRIPTION
	This macro adds a hidden exit. Not very usable though.

EXAMPLE
	ADD_HIDDEN_EXIT("down","cellar");

=============================================================================
NAME
	REMOVE_HIDDEN_EXIT( DIR )

DESCRIPTION
	This macro removes a previously added hidden exit.

EXAMPLE
	ADD_HIDDEN_EXIT("down");

=============================================================================
